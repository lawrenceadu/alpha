<?php 
    namespace CLI;

    if (file_exists(__DIR__ . '/vendor/autoload.php')):
        require_once __DIR__ . '/vendor/autoload.php';
    endif;

    class AlphaCLI
    {
        private $controller_path  = __dir__ . '/app/controllers/';
        private $migration_path   = __dir__ . '/app/migrations/';
        private $model_path       = __dir__ . '/app/models/';
        private $helper_path      = __dir__ . '/app/helpers/';

        public function __construct()
        {

        }

        public function run($command, $argv)
        {
            switch(strtolower($command)){
                case "migration":
                    foreach(glob(__DIR__ . '/app/migrations/*.php') as $migration):
                        
                        $path = explode("/", $migration);
                        $file = end($path);
                        
                        $filename = str_replace(".php", "", $file);

                        if ($filename !== "Schema"):
                            require $migration;

                            $filename = substr($filename, 15);
                            $filename = ucwords(str_replace("_", " ", $filename));
                            
                            $file_array = explode(" ", $filename);

                            if(strtolower($file_array[0]) == "create"):
                                unset($file_array[0]);
                                $file_array[count($file_array)] = substr($file_array[count($file_array)], 0, -1);
                            endif;

                            $filename = implode("", $file_array);

                            new $filename;
                        endif;
                    endforeach;
                    
                    break;
            }
        }

        public function generate($command, $argv)
        {
            switch (strtolower($command)) {
                case 'controller':
                    return $this->controller($argv);
                case 'migration':
                    return $this->migration($argv);
                case 'model':
                    return $this->model($argv);
                case 'helper':
                    return $this->helper($argv);
                default:
                    break;
            }
        }

        public function delete($command, $argv)
        {
            switch (strtolower($command)) {
                case 'controller':
                    list($dirname, $filename) = $this->dir_and_file($argv[0], $this->controller_path, 'Controller.php');

                    if(file_exists($dirname . '/' . $filename)):
                        unlink($dirname . '/' . $filename);

                        $is_empty = !(new \FilesystemIterator($dirname))->valid();

                        if ($is_empty === true):
                            $path = explode('/', $dirname);
                            $base_controller = ucwords(strtolower(end($path))) . "Controller.php";
                            $base_path = str_replace(end($path), "", $dirname);

                            unlink($base_path . $base_controller);
                            rmdir($dirname);
                        endif;
                    else:
                        echo "Controller does not exists";
                        return false;
                    endif;

                    echo "{$filename} controller deleted successfully";
                    break;
                
                default:
                    # code...
                    break;
            }
        }

        private function migration($argv, $type = "migrate")
        {
            if (isset($argv[0])) :
                $output = ltrim(strtolower(preg_replace('/[A-Z]([A-Z](?![a-z]))*/', '_$0', $argv[0])), '_');

                $file = date("YmdHis") . '_';

                switch ($type) {
                    case 'create':
                        $file .= "create_" . $output . "s";
                        break;
                    
                    default:
                        $file .= $output;
                        break;
                }
                
                $file .= ".php";
                touch($this->migration_path . $file);

                $class = str_replace("_", " ", $output);
                $class = ucwords($class);
                $class = str_replace(" ", "", $class);

                try {
                    //code...
                } catch (\Throwable $th) {
                    //throw $th;
                }

                if ($type == "migrate"):
                    $func = "public function __construct()
                            {
                                parent::__construct();

                                \$this->change();
                            }
                            public function change()
                            {
                                \$this->capsule::schema()->table('', function(\$table){
                                    
                                });
                                
                            }";
                elseif ($type == "create"):
                    $func = "
                            public function __construct()
                            {
                                parent::__construct();
                                \$this->up();
                            }
                            public function up()
                            {
                                if(!\$this->capsule::schema()->hasTable('{$output}s')):
                                    \$this->capsule::schema()->create('{$output}s', function (\$table) {
                                        \$table->increments('id');
                                        // other table columns go here
                                        \$table->timestamps();
                                    });
                                endif;
                            }
                            
                            public function down()
                            {
                                \$this->capsule::schema()->dropIfExists('{$output}s');
                            }";
                endif;

                $fp = fopen($this->migration_path . $file, 'w');
                fwrite($fp, trim(preg_replace('/\t+/', '', "<?php  
                                require_once __DIR__ . '/Schema.php';

                                use App\Migrations\Schema;

                                class {$class} extends Schema {
                                    {$func}
                                }")));
                fclose($fp);
            else :
                echo "migration name does not exist";
            endif;
        }

        private function controller($argv)
        {
            list($dirname, $filename) = $this->dir_and_file($argv[0], $this->controller_path, 'Controller.php');
            $base_controller = "Base";
            $base_path = __DIR__ . '/app/controller/';

            if (!file_exists($dirname)) :
                mkdir($dirname, 0755, true);

                $paths = explode('/', $dirname);
                $base_controller = ucwords(strtolower(end($paths)));
                $children_path = end($paths);

                $base_path = str_replace("{$children_path}", "", $dirname);


                if (!file_exists("{$base_path}{$base_controller}Controller.php")) {
                    touch("{$base_path}{$base_controller}Controller.php");

                    $fp = fopen("{$base_path}{$base_controller}Controller.php", "w");
                    fwrite($fp, trim(preg_replace('/\t+/', '', "<?php
                                namespace App\Controllers;

                                use App\Controllers\Base as Base;

                                class Index extends Base
                                {
                                    public function __construct()
                                    {
                                        parent::__construct();
                                    }

                                    public function index()
                                    {
                                        \$this->view('path_in_view/index.html');
                                    }
                                }")));
                    fclose($fp);
                }
            endif;

            if (!file_exists($dirname . '/' . $filename)) :
                touch($dirname . '/' . $filename);
                $file = str_replace("Controller.php", "", $filename);

                $fp = fopen($dirname . '/' . $filename, "w");
                fwrite($fp, trim(preg_replace('/\t+/', '', "<?php
                                namespace App\Controllers\\{$base_controller};
                                use App\Controllers\\{$base_controller} as {$base_controller};

                                class {$file} extends {$base_controller}
                                {
                                    public function __construct()
                                    {
                                        parent::__construct();        
                                    }

                                    public function index()
                                    {
                                        
                                    }

                                    public function create()
                                    {

                                    }

                                    public function show()
                                    {

                                    }

                                    public function destroy()
                                    {

                                    }
                                }")));
                fclose($fp);
            else :
                echo "Controller already exists";
                return false;
            endif;

            echo "{$filename} controller created successfully";
        }

        private function model($argv)
        {
            if (isset($argv[0])):
                $model = ucwords($argv[0]);
                $file = $model . '.php';
                
                if (!file_exists($this->model_path . $file)):
                    touch($this->model_path . $file);

                    $fp = fopen($this->model_path . $file, "w");
                    fwrite($fp, trim(preg_replace('/\t+/', '', "<?php
                                    namespace App\Models;

                                    use App\Lib\Database;
                                    new Database();

                                    use Illuminate\Database\Eloquent\Model as Eloquent;

                                    class {$model} extends Eloquent
                                    {

                                    }")));
                    fclose($fp);

                    $this->migration($argv, "create");
                else:

                endif;
                
            else:

            endif;
        }

        private function helper($argv)
        {
            if(isset($argv[0])):
                $file = $argv[0] . 'Helper.php';

                if (!file_exists($this->helper_path . $file)) :
                    touch($this->helper_path . $file);

                    $fp = fopen($this->helper_path . $file, "w");
                    fwrite($fp, trim(preg_replace('/\t+/', '', "<?php 
                                    namespace App\Helpers;

                                    use App\Helpers\BaseHelper;

                                    class {$argv[0]}Helper extends BaseHelper
                                    {

                                        public function __construct()
                                        {
                                            parent::__construct();
                                        }
                                    }")));
                    fclose($fp);
                else:

                endif;
            else:

            endif;
        }

        private function dir_and_file($arg, $path, $file)
        {
            $path_to_controller = strtolower($arg).$file;
            $path_info = pathinfo($path_to_controller);

            $dirname = $path_info["dirname"] == "." ? $path : $path . $path_info["dirname"];
            $filename = ucwords(strtolower(str_replace("Controller", "", $path_info['filename']))).'Controller.php';

            return [$dirname, $filename];
        }
    }
    
    $cli = new AlphaCLI();

    $command = $argv[1];
    $subcommand = null;

    if ($command !== NULL || !empty($command)):
        $commands = explode(":", $command);
        
        $command = $commands[0];
        $subcommand = isset($commands[1])? $commands[1] : null;

        // remove unnecessary elements in array
        unset($argv[0], $argv[1]);

        switch ($command) {
            case 'g':
            case 'generate':
                $cli->generate($subcommand, array_values($argv));
                break;
            case 'd':
            case 'delete':
                $cli->delete($subcommand, array_values($argv));
                break;
            case 'migrate':
                $cli->migrate();
                break;
            case 'serve':
                if (isset($argv[2])):
                    switch ($argv[2]) {
                        case '-p':
                            if (is_numeric($argv[3])):
                                echo shell_exec("php -S localhost:{$argv[3]}");
                            else:
                                echo "Port entered is not numeric";
                            endif;
                        break;
                    }
                else:
                    echo shell_exec("php -S localhost:7500");
                endif;

                break;
            case 'gulp':
                echo shell_exec("cd public && gulp");
                break;
            case "run":
                $cli->run($subcommand, array_values($argv));
                break;
            case 'init':
                echo \shell_exec("composer update");
                echo \shell_exec("cd public && npm install");
                break;
            default:
                
                break;
        }
    else:

    endif;